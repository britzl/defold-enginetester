function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.model_pred = render.predicate({"model"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.draw2d = true
    self.draw3d = false
    self.drawgui = true
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

    if self.draw2d then
        render.set_view(vmath.matrix4())
        render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1, 1))

        render.set_depth_mask(false)
        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_STENCIL_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.enable_state(render.STATE_BLEND)
        render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

        render.draw(self.tile_pred)
        render.draw(self.particle_pred)
    end

    if self.draw3d then    
        local eye = vmath.vector3(0, 64, 128)
        local look_at = vmath.vector3(0, 0, 0)
        local up = vmath.vector3(0, 1, 0)
        local view = vmath.matrix4_look_at(eye, look_at, up)
        render.set_view(view)
        render.set_projection(vmath.matrix4_perspective(math.pi/4, render.get_window_width()/render.get_window_height(), 1, 1000))
        
        render.enable_state(render.STATE_CULL_FACE)
        render.enable_state(render.STATE_DEPTH_TEST)
        render.set_depth_mask(true)
        render.draw(self.model_pred)
        render.draw_debug3d()
        render.set_depth_mask(false)
        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
    end

    if self.drawgui then
        render.set_view(vmath.matrix4())
        render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
        render.enable_state(render.STATE_STENCIL_TEST)
        render.draw(self.gui_pred)
        render.draw(self.text_pred)
        render.disable_state(render.STATE_STENCIL_TEST)
    end

    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("enable3d") then
        self.draw3d = true
    elseif message_id == hash("disable3d") then
        self.draw3d = false
    end
end
